
<div class="row" id="r-1">

  <div class="col-md-12 well">
    <div class="row-left">
      <span class="h3"><%= @map.title %>  </span>
      <strong>Nodes:</strong>
      <span class="badge"><%= @map.nodes.count %></span> |
      Categories:
      <span class="badge"><%= @categories.count %></span> |
      <%= link_to "Back", map_path(@map), class:"btn btn-default" %>
    </div><!--/.row-left -->

    <div class="node-info">
    </div>

  </div><!--/.col-md-12 -->

</div><!--/.row -->

<div class="row">
  <div id="svg-container" class="col-md-12" style="height=800px">
  </div><!--/.col-md-12 -->
</div><!--/.row -->

<script type="text/javascript">
  width = $("#svg-container").width()
  console.log("jq width says: " + width);

  var w = width;
    var h = 700;
    var linkDistance=150;

    var colors = d3.scale.category10();

    // get data as json from back end and put into graph object
    d3.json("/graph/data?map_id=" + "<%=@map.id%>" + "&format=json", function(error, graph) {
      if (error){ 
        console.log("error: " + error + " | graph: " + graph); 
        return;};
 
      var svg = d3.select("#svg-container").append("svg").attr({"width":w,"height":h});

      // any edges with duplicate source and target get an incremented 'linknum'
      for (var i = 0; i < graph.edges.length; i++){
        if ( i != 0 &&
             graph.edges[i].source == graph.edges[i-1].source &&
             graph.edges[i].target == graph.edges[i-1].target){
                  graph.edges[i].linknum = graph.edges[i-1].linknum + 1;
            }
        else {graph.edges[i].linknum = 1;};
      };

      var force = d3.layout.force()
          .nodes(graph.nodes)
          .links(graph.edges)
          .size([w,h])
          .linkDistance([linkDistance])
          .linkStrength(function(d){
            console.log("linkStrength: " + (1/d.linknum) );
            return (1/d.linknum)})
          .charge([-700])
          .theta(0.1)
          .gravity(0.05)
          .start();

     

      // console log the linknum values
      for (var i = 0; i < graph.edges.length; i++){
        console.log("edge["+i+"] : " + graph.edges[i].linknum + " s: " + graph.edges[i].source.name + " t: " + graph.edges[i].target.name);
      }

      var edges = svg.selectAll("line")
        .data(graph.edges)
        .enter()
        .append("path")
        .attr("id",function(d,i) {return 'edge'+i})
        .attr('marker-end','url(#arrowhead)')
        .attr("fill", "none")
        .style("stroke","#ccc")
        .style("pointer-events", "none");
      
      var nodes = svg.selectAll("circle")
        .data(graph.nodes)
        .enter()
        .append("circle")
        .attr({"r":15})
        .attr("stroke", "gray")
        .attr("stroke-width", 2)
        .attr("class", "node")
        .attr("id", function(d,i){return "n-index-" + i})
        .style("fill",function(d,i){return colors(i);})
        .on("click", function(d,i){logIt(d,i)})
        .call(force.drag);

      // string of html to be inserted for node info
      var nodeInfo = function(node){
        str = "<div class='node-info'><strong>Current Node:</strong> " +
              node.name + ",<strong> description:</strong> " +
              node.description + ", <strong>uuid: </strong> " +
              node.id;
        return str;
      };

      // show the node that was clicked on
      var logIt = function(d,i){
        $(".node-selected").css("stroke", "gray");
        $("#n-index-"+i).css("stroke", "orange").attr("class", "node-selected");
        $(".node-info").replaceWith(nodeInfo(d));
        return console.log("clicked node: " + d.name + " index: " + i);

      };

      var nodelabels = svg.selectAll(".nodelabel") 
         .data(graph.nodes)
         .enter()
         .append("text")
         .attr({"x":function(d){return d.x;},
                "y":function(d){return d.y;},
                "class":"nodelabel",
                "id": function(d,i){return "n-label-index-" + i},
                "font-size":10,
                "stroke":"black"})
         .text(function(d){return d.name;});

      var edgepaths = svg.selectAll(".edgepath")
          .data(graph.edges)
          .enter()
          .append('path')
          .attr({'d': function(d) {return 'M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y},
                 'class':'edgepath',
                 'fill-opacity':0,
                 'stroke-opacity':0,
                 'fill':'blue',
                 'stroke':'red',
                 'id':function(d,i) {return 'edgepath'+i}})
          .style("pointer-events", "none");

      var edgelabels = svg.selectAll(".edgelabel")
          .data(graph.edges)
          .enter()
          .append('text')
          .style("pointer-events", "none")
          .attr({'class':'edgelabel',
                 'id':function(d,i){return 'edgelabel'+i},
                 'dx':80,
                 'dy':0,
                 'font-size':10,
                 'fill':'#aaa'});

      edgelabels.append('textPath')
          .attr('xlink:href',function(d,i) {return '#edgepath'+i})
          .style("pointer-events", "none")
          .text(function(d,i){return d.type +' '+i});


      svg.append('defs').append('marker')
          .attr({'id':'arrowhead',
                 'viewBox':'-0 -5 10 10',
                 'refX':25,
                 'refY':0,
                 //'markerUnits':'strokeWidth',
                 'orient':'auto',
                 'markerWidth':10,
                 'markerHeight':10,
                 'xoverflow':'visible'})
          .append('svg:path')
              .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
              .attr('fill', '#ccc')
              .attr('stroke','#ccc');

      force.on("tick", function(){

          edges.attr("d", function(d) {
              var dx = d.target.x - d.source.x,
                  dy = d.target.y - d.source.y,
                  dr = (Math.sqrt(dx * dx + dy * dy))-(35*d.linknum);
                  //dr = 100 / d.linknum
              return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
          });

          nodes.attr({"cx":function(d){return d.x;},
                      "cy":function(d){return d.y;}
          });

          nodelabels.attr("x", function(d) { return d.x; }) 
                    .attr("y", function(d) { return d.y; });

          // edgepaths.attr('d', function(d) { var path='M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y;
          //                                    //console.log(d)
          //                                    return path});  

          edgepaths.attr("d", function(d) {
              var dx = d.target.x - d.source.x,
                  dy = d.target.y - d.source.y,
                  dr = (Math.sqrt(dx * dx + dy * dy))-(35*d.linknum);
                  //dr = 100 /d.linknum; 
              return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
          });    

          edgelabels.attr('transform',function(d,i){
              if (d.target.x<d.source.x){
                  bbox = this.getBBox();
                  rx = bbox.x+bbox.width/2;
                  ry = bbox.y+bbox.height/2;
                  return 'rotate(180 '+rx+' '+ry+')';
                  }
              else {
                  return 'rotate(0)';
                  }
          });

          // edgelabels.attr("transform", function(d) {
          //     return "translate(" + (d.source.x + d.target.x) / 2 + "," 
          //     + (d.source.y + d.target.y) / 2 + ")"; });

          }); // close force function call

    }); //close d3.json call

</script>